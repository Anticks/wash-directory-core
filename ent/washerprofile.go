// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"the-car-wash-directory/ent/user"
	"the-car-wash-directory/ent/washerprofile"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// WasherProfile is the model entity for the WasherProfile schema.
type WasherProfile struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ServiceDetails holds the value of the "service_details" field.
	ServiceDetails string `json:"service_details,omitempty"`
	// Availability holds the value of the "availability" field.
	Availability string `json:"availability,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WasherProfileQuery when eager-loading is set.
	Edges               WasherProfileEdges `json:"edges"`
	user_washer_profile *uuid.UUID
	selectValues        sql.SelectValues
}

// WasherProfileEdges holds the relations/edges for other nodes in the graph.
type WasherProfileEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WasherProfileEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WasherProfile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case washerprofile.FieldServiceDetails, washerprofile.FieldAvailability:
			values[i] = new(sql.NullString)
		case washerprofile.FieldCreatedAt, washerprofile.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case washerprofile.FieldID:
			values[i] = new(uuid.UUID)
		case washerprofile.ForeignKeys[0]: // user_washer_profile
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WasherProfile fields.
func (wp *WasherProfile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case washerprofile.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				wp.ID = *value
			}
		case washerprofile.FieldServiceDetails:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_details", values[i])
			} else if value.Valid {
				wp.ServiceDetails = value.String
			}
		case washerprofile.FieldAvailability:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field availability", values[i])
			} else if value.Valid {
				wp.Availability = value.String
			}
		case washerprofile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wp.CreatedAt = value.Time
			}
		case washerprofile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wp.UpdatedAt = value.Time
			}
		case washerprofile.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_washer_profile", values[i])
			} else if value.Valid {
				wp.user_washer_profile = new(uuid.UUID)
				*wp.user_washer_profile = *value.S.(*uuid.UUID)
			}
		default:
			wp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WasherProfile.
// This includes values selected through modifiers, order, etc.
func (wp *WasherProfile) Value(name string) (ent.Value, error) {
	return wp.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the WasherProfile entity.
func (wp *WasherProfile) QueryOwner() *UserQuery {
	return NewWasherProfileClient(wp.config).QueryOwner(wp)
}

// Update returns a builder for updating this WasherProfile.
// Note that you need to call WasherProfile.Unwrap() before calling this method if this WasherProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (wp *WasherProfile) Update() *WasherProfileUpdateOne {
	return NewWasherProfileClient(wp.config).UpdateOne(wp)
}

// Unwrap unwraps the WasherProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wp *WasherProfile) Unwrap() *WasherProfile {
	_tx, ok := wp.config.driver.(*txDriver)
	if !ok {
		panic("ent: WasherProfile is not a transactional entity")
	}
	wp.config.driver = _tx.drv
	return wp
}

// String implements the fmt.Stringer.
func (wp *WasherProfile) String() string {
	var builder strings.Builder
	builder.WriteString("WasherProfile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wp.ID))
	builder.WriteString("service_details=")
	builder.WriteString(wp.ServiceDetails)
	builder.WriteString(", ")
	builder.WriteString("availability=")
	builder.WriteString(wp.Availability)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(wp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wp.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WasherProfiles is a parsable slice of WasherProfile.
type WasherProfiles []*WasherProfile
