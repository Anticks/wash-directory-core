// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"the-car-wash-directory/ent/predicate"
	"the-car-wash-directory/ent/user"
	"the-car-wash-directory/ent/washerprofile"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WasherProfileUpdate is the builder for updating WasherProfile entities.
type WasherProfileUpdate struct {
	config
	hooks    []Hook
	mutation *WasherProfileMutation
}

// Where appends a list predicates to the WasherProfileUpdate builder.
func (wpu *WasherProfileUpdate) Where(ps ...predicate.WasherProfile) *WasherProfileUpdate {
	wpu.mutation.Where(ps...)
	return wpu
}

// SetServiceDetails sets the "service_details" field.
func (wpu *WasherProfileUpdate) SetServiceDetails(s string) *WasherProfileUpdate {
	wpu.mutation.SetServiceDetails(s)
	return wpu
}

// SetNillableServiceDetails sets the "service_details" field if the given value is not nil.
func (wpu *WasherProfileUpdate) SetNillableServiceDetails(s *string) *WasherProfileUpdate {
	if s != nil {
		wpu.SetServiceDetails(*s)
	}
	return wpu
}

// ClearServiceDetails clears the value of the "service_details" field.
func (wpu *WasherProfileUpdate) ClearServiceDetails() *WasherProfileUpdate {
	wpu.mutation.ClearServiceDetails()
	return wpu
}

// SetAvailability sets the "availability" field.
func (wpu *WasherProfileUpdate) SetAvailability(s string) *WasherProfileUpdate {
	wpu.mutation.SetAvailability(s)
	return wpu
}

// SetNillableAvailability sets the "availability" field if the given value is not nil.
func (wpu *WasherProfileUpdate) SetNillableAvailability(s *string) *WasherProfileUpdate {
	if s != nil {
		wpu.SetAvailability(*s)
	}
	return wpu
}

// ClearAvailability clears the value of the "availability" field.
func (wpu *WasherProfileUpdate) ClearAvailability() *WasherProfileUpdate {
	wpu.mutation.ClearAvailability()
	return wpu
}

// SetCreatedAt sets the "created_at" field.
func (wpu *WasherProfileUpdate) SetCreatedAt(t time.Time) *WasherProfileUpdate {
	wpu.mutation.SetCreatedAt(t)
	return wpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wpu *WasherProfileUpdate) SetNillableCreatedAt(t *time.Time) *WasherProfileUpdate {
	if t != nil {
		wpu.SetCreatedAt(*t)
	}
	return wpu
}

// SetUpdatedAt sets the "updated_at" field.
func (wpu *WasherProfileUpdate) SetUpdatedAt(t time.Time) *WasherProfileUpdate {
	wpu.mutation.SetUpdatedAt(t)
	return wpu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (wpu *WasherProfileUpdate) SetOwnerID(id uuid.UUID) *WasherProfileUpdate {
	wpu.mutation.SetOwnerID(id)
	return wpu
}

// SetOwner sets the "owner" edge to the User entity.
func (wpu *WasherProfileUpdate) SetOwner(u *User) *WasherProfileUpdate {
	return wpu.SetOwnerID(u.ID)
}

// Mutation returns the WasherProfileMutation object of the builder.
func (wpu *WasherProfileUpdate) Mutation() *WasherProfileMutation {
	return wpu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (wpu *WasherProfileUpdate) ClearOwner() *WasherProfileUpdate {
	wpu.mutation.ClearOwner()
	return wpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wpu *WasherProfileUpdate) Save(ctx context.Context) (int, error) {
	wpu.defaults()
	return withHooks(ctx, wpu.sqlSave, wpu.mutation, wpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wpu *WasherProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := wpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wpu *WasherProfileUpdate) Exec(ctx context.Context) error {
	_, err := wpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wpu *WasherProfileUpdate) ExecX(ctx context.Context) {
	if err := wpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wpu *WasherProfileUpdate) defaults() {
	if _, ok := wpu.mutation.UpdatedAt(); !ok {
		v := washerprofile.UpdateDefaultUpdatedAt()
		wpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wpu *WasherProfileUpdate) check() error {
	if wpu.mutation.OwnerCleared() && len(wpu.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WasherProfile.owner"`)
	}
	return nil
}

func (wpu *WasherProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(washerprofile.Table, washerprofile.Columns, sqlgraph.NewFieldSpec(washerprofile.FieldID, field.TypeUUID))
	if ps := wpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wpu.mutation.ServiceDetails(); ok {
		_spec.SetField(washerprofile.FieldServiceDetails, field.TypeString, value)
	}
	if wpu.mutation.ServiceDetailsCleared() {
		_spec.ClearField(washerprofile.FieldServiceDetails, field.TypeString)
	}
	if value, ok := wpu.mutation.Availability(); ok {
		_spec.SetField(washerprofile.FieldAvailability, field.TypeString, value)
	}
	if wpu.mutation.AvailabilityCleared() {
		_spec.ClearField(washerprofile.FieldAvailability, field.TypeString)
	}
	if value, ok := wpu.mutation.CreatedAt(); ok {
		_spec.SetField(washerprofile.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wpu.mutation.UpdatedAt(); ok {
		_spec.SetField(washerprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if wpu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   washerprofile.OwnerTable,
			Columns: []string{washerprofile.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wpu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   washerprofile.OwnerTable,
			Columns: []string{washerprofile.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{washerprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wpu.mutation.done = true
	return n, nil
}

// WasherProfileUpdateOne is the builder for updating a single WasherProfile entity.
type WasherProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WasherProfileMutation
}

// SetServiceDetails sets the "service_details" field.
func (wpuo *WasherProfileUpdateOne) SetServiceDetails(s string) *WasherProfileUpdateOne {
	wpuo.mutation.SetServiceDetails(s)
	return wpuo
}

// SetNillableServiceDetails sets the "service_details" field if the given value is not nil.
func (wpuo *WasherProfileUpdateOne) SetNillableServiceDetails(s *string) *WasherProfileUpdateOne {
	if s != nil {
		wpuo.SetServiceDetails(*s)
	}
	return wpuo
}

// ClearServiceDetails clears the value of the "service_details" field.
func (wpuo *WasherProfileUpdateOne) ClearServiceDetails() *WasherProfileUpdateOne {
	wpuo.mutation.ClearServiceDetails()
	return wpuo
}

// SetAvailability sets the "availability" field.
func (wpuo *WasherProfileUpdateOne) SetAvailability(s string) *WasherProfileUpdateOne {
	wpuo.mutation.SetAvailability(s)
	return wpuo
}

// SetNillableAvailability sets the "availability" field if the given value is not nil.
func (wpuo *WasherProfileUpdateOne) SetNillableAvailability(s *string) *WasherProfileUpdateOne {
	if s != nil {
		wpuo.SetAvailability(*s)
	}
	return wpuo
}

// ClearAvailability clears the value of the "availability" field.
func (wpuo *WasherProfileUpdateOne) ClearAvailability() *WasherProfileUpdateOne {
	wpuo.mutation.ClearAvailability()
	return wpuo
}

// SetCreatedAt sets the "created_at" field.
func (wpuo *WasherProfileUpdateOne) SetCreatedAt(t time.Time) *WasherProfileUpdateOne {
	wpuo.mutation.SetCreatedAt(t)
	return wpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wpuo *WasherProfileUpdateOne) SetNillableCreatedAt(t *time.Time) *WasherProfileUpdateOne {
	if t != nil {
		wpuo.SetCreatedAt(*t)
	}
	return wpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wpuo *WasherProfileUpdateOne) SetUpdatedAt(t time.Time) *WasherProfileUpdateOne {
	wpuo.mutation.SetUpdatedAt(t)
	return wpuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (wpuo *WasherProfileUpdateOne) SetOwnerID(id uuid.UUID) *WasherProfileUpdateOne {
	wpuo.mutation.SetOwnerID(id)
	return wpuo
}

// SetOwner sets the "owner" edge to the User entity.
func (wpuo *WasherProfileUpdateOne) SetOwner(u *User) *WasherProfileUpdateOne {
	return wpuo.SetOwnerID(u.ID)
}

// Mutation returns the WasherProfileMutation object of the builder.
func (wpuo *WasherProfileUpdateOne) Mutation() *WasherProfileMutation {
	return wpuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (wpuo *WasherProfileUpdateOne) ClearOwner() *WasherProfileUpdateOne {
	wpuo.mutation.ClearOwner()
	return wpuo
}

// Where appends a list predicates to the WasherProfileUpdate builder.
func (wpuo *WasherProfileUpdateOne) Where(ps ...predicate.WasherProfile) *WasherProfileUpdateOne {
	wpuo.mutation.Where(ps...)
	return wpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wpuo *WasherProfileUpdateOne) Select(field string, fields ...string) *WasherProfileUpdateOne {
	wpuo.fields = append([]string{field}, fields...)
	return wpuo
}

// Save executes the query and returns the updated WasherProfile entity.
func (wpuo *WasherProfileUpdateOne) Save(ctx context.Context) (*WasherProfile, error) {
	wpuo.defaults()
	return withHooks(ctx, wpuo.sqlSave, wpuo.mutation, wpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wpuo *WasherProfileUpdateOne) SaveX(ctx context.Context) *WasherProfile {
	node, err := wpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wpuo *WasherProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := wpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wpuo *WasherProfileUpdateOne) ExecX(ctx context.Context) {
	if err := wpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wpuo *WasherProfileUpdateOne) defaults() {
	if _, ok := wpuo.mutation.UpdatedAt(); !ok {
		v := washerprofile.UpdateDefaultUpdatedAt()
		wpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wpuo *WasherProfileUpdateOne) check() error {
	if wpuo.mutation.OwnerCleared() && len(wpuo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WasherProfile.owner"`)
	}
	return nil
}

func (wpuo *WasherProfileUpdateOne) sqlSave(ctx context.Context) (_node *WasherProfile, err error) {
	if err := wpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(washerprofile.Table, washerprofile.Columns, sqlgraph.NewFieldSpec(washerprofile.FieldID, field.TypeUUID))
	id, ok := wpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WasherProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, washerprofile.FieldID)
		for _, f := range fields {
			if !washerprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != washerprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wpuo.mutation.ServiceDetails(); ok {
		_spec.SetField(washerprofile.FieldServiceDetails, field.TypeString, value)
	}
	if wpuo.mutation.ServiceDetailsCleared() {
		_spec.ClearField(washerprofile.FieldServiceDetails, field.TypeString)
	}
	if value, ok := wpuo.mutation.Availability(); ok {
		_spec.SetField(washerprofile.FieldAvailability, field.TypeString, value)
	}
	if wpuo.mutation.AvailabilityCleared() {
		_spec.ClearField(washerprofile.FieldAvailability, field.TypeString)
	}
	if value, ok := wpuo.mutation.CreatedAt(); ok {
		_spec.SetField(washerprofile.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(washerprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if wpuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   washerprofile.OwnerTable,
			Columns: []string{washerprofile.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wpuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   washerprofile.OwnerTable,
			Columns: []string{washerprofile.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WasherProfile{config: wpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{washerprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wpuo.mutation.done = true
	return _node, nil
}
