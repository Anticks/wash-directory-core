// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"the-car-wash-directory/ent/user"
	"the-car-wash-directory/ent/washerprofile"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WasherProfileCreate is the builder for creating a WasherProfile entity.
type WasherProfileCreate struct {
	config
	mutation *WasherProfileMutation
	hooks    []Hook
}

// SetServiceDetails sets the "service_details" field.
func (wpc *WasherProfileCreate) SetServiceDetails(s string) *WasherProfileCreate {
	wpc.mutation.SetServiceDetails(s)
	return wpc
}

// SetNillableServiceDetails sets the "service_details" field if the given value is not nil.
func (wpc *WasherProfileCreate) SetNillableServiceDetails(s *string) *WasherProfileCreate {
	if s != nil {
		wpc.SetServiceDetails(*s)
	}
	return wpc
}

// SetAvailability sets the "availability" field.
func (wpc *WasherProfileCreate) SetAvailability(s string) *WasherProfileCreate {
	wpc.mutation.SetAvailability(s)
	return wpc
}

// SetNillableAvailability sets the "availability" field if the given value is not nil.
func (wpc *WasherProfileCreate) SetNillableAvailability(s *string) *WasherProfileCreate {
	if s != nil {
		wpc.SetAvailability(*s)
	}
	return wpc
}

// SetCreatedAt sets the "created_at" field.
func (wpc *WasherProfileCreate) SetCreatedAt(t time.Time) *WasherProfileCreate {
	wpc.mutation.SetCreatedAt(t)
	return wpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wpc *WasherProfileCreate) SetNillableCreatedAt(t *time.Time) *WasherProfileCreate {
	if t != nil {
		wpc.SetCreatedAt(*t)
	}
	return wpc
}

// SetUpdatedAt sets the "updated_at" field.
func (wpc *WasherProfileCreate) SetUpdatedAt(t time.Time) *WasherProfileCreate {
	wpc.mutation.SetUpdatedAt(t)
	return wpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wpc *WasherProfileCreate) SetNillableUpdatedAt(t *time.Time) *WasherProfileCreate {
	if t != nil {
		wpc.SetUpdatedAt(*t)
	}
	return wpc
}

// SetID sets the "id" field.
func (wpc *WasherProfileCreate) SetID(u uuid.UUID) *WasherProfileCreate {
	wpc.mutation.SetID(u)
	return wpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wpc *WasherProfileCreate) SetNillableID(u *uuid.UUID) *WasherProfileCreate {
	if u != nil {
		wpc.SetID(*u)
	}
	return wpc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (wpc *WasherProfileCreate) SetOwnerID(id uuid.UUID) *WasherProfileCreate {
	wpc.mutation.SetOwnerID(id)
	return wpc
}

// SetOwner sets the "owner" edge to the User entity.
func (wpc *WasherProfileCreate) SetOwner(u *User) *WasherProfileCreate {
	return wpc.SetOwnerID(u.ID)
}

// Mutation returns the WasherProfileMutation object of the builder.
func (wpc *WasherProfileCreate) Mutation() *WasherProfileMutation {
	return wpc.mutation
}

// Save creates the WasherProfile in the database.
func (wpc *WasherProfileCreate) Save(ctx context.Context) (*WasherProfile, error) {
	wpc.defaults()
	return withHooks(ctx, wpc.sqlSave, wpc.mutation, wpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wpc *WasherProfileCreate) SaveX(ctx context.Context) *WasherProfile {
	v, err := wpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wpc *WasherProfileCreate) Exec(ctx context.Context) error {
	_, err := wpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wpc *WasherProfileCreate) ExecX(ctx context.Context) {
	if err := wpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wpc *WasherProfileCreate) defaults() {
	if _, ok := wpc.mutation.CreatedAt(); !ok {
		v := washerprofile.DefaultCreatedAt()
		wpc.mutation.SetCreatedAt(v)
	}
	if _, ok := wpc.mutation.UpdatedAt(); !ok {
		v := washerprofile.DefaultUpdatedAt()
		wpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wpc.mutation.ID(); !ok {
		v := washerprofile.DefaultID()
		wpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wpc *WasherProfileCreate) check() error {
	if _, ok := wpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WasherProfile.created_at"`)}
	}
	if _, ok := wpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WasherProfile.updated_at"`)}
	}
	if len(wpc.mutation.OwnerIDs()) == 0 {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "WasherProfile.owner"`)}
	}
	return nil
}

func (wpc *WasherProfileCreate) sqlSave(ctx context.Context) (*WasherProfile, error) {
	if err := wpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wpc.mutation.id = &_node.ID
	wpc.mutation.done = true
	return _node, nil
}

func (wpc *WasherProfileCreate) createSpec() (*WasherProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &WasherProfile{config: wpc.config}
		_spec = sqlgraph.NewCreateSpec(washerprofile.Table, sqlgraph.NewFieldSpec(washerprofile.FieldID, field.TypeUUID))
	)
	if id, ok := wpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wpc.mutation.ServiceDetails(); ok {
		_spec.SetField(washerprofile.FieldServiceDetails, field.TypeString, value)
		_node.ServiceDetails = value
	}
	if value, ok := wpc.mutation.Availability(); ok {
		_spec.SetField(washerprofile.FieldAvailability, field.TypeString, value)
		_node.Availability = value
	}
	if value, ok := wpc.mutation.CreatedAt(); ok {
		_spec.SetField(washerprofile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wpc.mutation.UpdatedAt(); ok {
		_spec.SetField(washerprofile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := wpc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   washerprofile.OwnerTable,
			Columns: []string{washerprofile.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_washer_profile = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WasherProfileCreateBulk is the builder for creating many WasherProfile entities in bulk.
type WasherProfileCreateBulk struct {
	config
	err      error
	builders []*WasherProfileCreate
}

// Save creates the WasherProfile entities in the database.
func (wpcb *WasherProfileCreateBulk) Save(ctx context.Context) ([]*WasherProfile, error) {
	if wpcb.err != nil {
		return nil, wpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wpcb.builders))
	nodes := make([]*WasherProfile, len(wpcb.builders))
	mutators := make([]Mutator, len(wpcb.builders))
	for i := range wpcb.builders {
		func(i int, root context.Context) {
			builder := wpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WasherProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wpcb *WasherProfileCreateBulk) SaveX(ctx context.Context) []*WasherProfile {
	v, err := wpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wpcb *WasherProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := wpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wpcb *WasherProfileCreateBulk) ExecX(ctx context.Context) {
	if err := wpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
